1.Magnus Carlsen,has finally managed to write a program to solve the N queens problem. However, his version of the N queens problem is not really all that similar to the classical one.

Recall that in the N queens problem, there is a square chessboard of size NxN. The goal is to put N queens on the chessboard so that no two queens would be able to attack each other.

In Magnus's version of the problem (which he states to be "much harder" than the original one), there are K "blocked" squares given on the chessboard. The goal is still the same: to put N queens on the chessboard such that no two queens would be able to attack each other. However, there are some differences due to the existence of blocked squares. First, a queen cannot be put on a blocked square. Secondly, two queens are considered to be able to attack each other only if there is no blocked square between them. Finally, there must be exactly one queen on every column of the board.

Magnus claims that his program solves the above problem very effectively. He generates some test cases (which his program can solve within minutes) to challenge you. You know the method Magnus used to generate the test case. For a given N, Magnus randomly picks a number K between 1 and N2/2 with equal probability. After that, Magnus picks K blocked squares on the chess board. Any combinations of K squares can be picked with equal probability.

Write a program that can solve Magnus's test cases within seconds.

Input

The first line contains t, the number of test cases (about 5). Then t test cases follow. Each test case has the following form:
The first line contains two integers N and K (8 <= N <= 500, 1 <= K <= N2/2) 
Each line in the next K lines contains two integers i, j which are the row and the column number of a blocked square (1 <= i, j <= N) 
Each test case's input is separated by a blank line. The rows and the columns of the chessboard are numbered from 1 to N. There is always a solution for each test case.
Output
For each test case, print a single line containing N integers a1, a2, ..., aN in which ai is the row number of the queen in column i. Any correct solution will be accepted.
Example
Input
1

8 15
7 7
3 1
7 1
4 8
8 3
6 5
4 4
2 1
8 2
6 3
3 7
7 6
2 3
1 2
6 4

Output
4 2 7 5 2 4 6 8 

2.
Ram Narayan Singh had recently started home delivery service for pizzas. Ram has only a single delivery boy that delivers the orders by riding his motorcycle. The motorcycle has an unlimited capacity of fuel tank. However, it is too old and can only ride 1 km for each 1 liter of fuel.
There are N fuel stations near the restaurant. The i-th fuel station can fill a fuel tank exactly Ki liters; not more and not less. Filling a fuel tank with any amount of fuel in those stations tends to take a long time. Since the fuel stations are placed near the restaurant, no fuel is needed to go to a fuel station.
Today Ram received N pizza orders, which is the same number of fuel stations fortuitously. The house of the person that ordered the i-th order is Hi km away from the restaurant. The delivery boy cannot deliver more than one order at a time. Therefore, after delivering an order, he must return back to the restaurant to take the next order.
The delivery boy is an efficient person and thus he wants to fill the fuel tank with the exact amount of fuel required to deliver an order and return back. He also does not want to spends much time filling the tank, so he wants to minimize the number of times he fills the tank. Help him determine the minimum number of times he must fill the tank to deliver all orders.

Input

The first line contains a single integer T denoting the number test cases. The description of T test cases follows. For each test case, the first line contains a single integer N. The second line contains N space-separated integers Hi. The third line contains N space-separated integers Ki.
Output
For each test case, output a single line containing the minimum number of times the delivery boy must fill the tank.
Constraints
1 ≤ T ≤ 500
1 ≤ N ≤ 500
1 ≤ Hi ≤ 500
1 ≤ Ki ≤ 500
There is at least one way for completing the deliveries.
That is, the delivery boy always can fill a fuel tank exactly 2 * Hi liters for 1 ≤ i ≤ N.
Example
Input:

1
4
1 2 3 4
1 4 5 3

Output:
7

Explanation:
Here is one possible solution. 
For the first order, the delivery boy must ride 1 + 1 = 2 km long. Fill the tank twice in the first fuel station. 
For the second order, the delivery boy must ride 2 + 2 = 4 km long. Fill the tank once in the second fuel station. 
For the third order, the delivery boy must ride 3 + 3 = 6 km long. Fill the tank twice in the fourth fuel station. 
For the fourth order, the delivery boy must ride 4 + 4 = 8 km long. Fill the tank in the third and fourth fuel stations. 
In total, the delivery boy must fill the tank 7 times. There is no way to fill the tank less than 7 times. 


3.
Vulture and  Eagle are on a scavenger hunt you have devised. They are going to visit a set of locations and you are going to leave exactly one object at each location. There are precisely two different types of objects, say type A and type B. Futhermore, Vulture only likes objects of type A and Eagle only likes objects of type B so Vulture will never collect a type B object and Eagle will never collect a type A object. 
Vulture and Eagle will travel together and visit these locations one at a time. If at any point during their journey one person has many more of their preferred item than the other, then the other will get jealous and they may fight. To help avoid such fights, you want to assign items to locations to minimize the maximum difference between the number if items they hold over the whole journey. 
Specifically, if R = (r1,r2,...,rn) is the order the locations will be visited and P is an assignment of an object to each location, then we define dR(P,t) to be the difference between the number of objects Vulture has and the number of objects Eagle has after visiting the first t locations. Finally, let dR(P) denote the maximum of dR(P,t) over all times t. The goal would be to find an assignment P to minimize dR(P). 
 Both Vulture and Eagle have decided on an order they want to visit the items. Vulture wants to follow order S but Eagle wants to follow order T. It looks like they are a long way from resolving this dispute but you need to place the items now! To minimize the effect of the worst-case scenario, you want to place the items in some manner P to minimize the maximum of dS(P) and dT(P). 

Input

The first line indicates the number of test cases to follow (at most 30). Each test case consists of three lines. The first contains a single integer n between 1 and 20,000. The next two lines each contain a permutation of the integers from 0 to n-1 where consecutive integers are separated by a space. The first permutation, say S, is the order that Vulture wants to visit the locations and the second permutation, say T, is the order that Eagle wants to visit the locations. 
Output
The output for each test case consists of a single line. This line should contain a single string of length n consisting only of uppercase characters 'A' and 'B'. This string describes a placement P of items to locations where the i'th character describes which item is at location i (the indices range from 0 to n-1). 
The placement P described by this string should minimize the maximum of dS(P) and dT(P). If there are many strings describing optimum placements, then output the lexicographically least such string. 
Example
Input:
2
3
1 0 2
2 1 0
4
0 2 1 3
1 2 3 0

Output:

ABA
AABB
Explanation of Sample Data
In the first test case, following the first permutation 1 0 2 results in the sequence of objects being BAA while following the second permutation results in the sequence of objects being ABA. In either case, the maximum difference between the number of As seen and the number of Bs seen over the whole trip is at most 1. 
In the second test case, following permutation 0 2 1 3 results in the sequence being ABAB wherease following permutation 1 2 3 0 results in the sequence being ABBA. Again, the maximum difference in either case is at most 1.

4.
A and B are very good friends. A works in company named C and B works in company named D.Due to their work they are not able to meet each other frequently. So they  decided to meet one day in  a restaurant. As they are very busy one would not wait for another too long.  A will spend at most t1 seconds waiting for B while B will wait no more than t2 seconds.

A can arrive at any moment within [0..T1] with equal probability. Similarly B can arrive at any moment within [0..T2].

Arrival time may be any real number from the interval.

A asks you to calculate the probability of meeting his friend B in the restaurant.

Input
First line of the input contains an integer T denoting the number of test cases. First and the only line of each test case contains four space-separated integers – T1, T2, t1 and t2.
Output

For each test case, output one the single real number - probability of meeting A and his friend B. The answer will be considered correct if its absolute or relative error doesn't exceed 10-6.
Constraints

1 ≤ T ≤ 105
1 ≤ T1, T2 ≤ 109
0 ≤ t1, t2 ≤ 109
Subtask 1: (5 points)

t1 = 0 and t2 = 0
Subtask 2: (15 points)

t1 = 0 or t2 = 0
Subtask 3: (25 points)

1 ≤ T ≤ 5
1 ≤ T1, T2 ≤ 10
The answer will be considered correct if its absolute or relative error doesn't exceed 10-2
Subtask 4: (55 points)

Original constraints
Example

Input:
2
2 2 1 1
1 1 1 1
Output:
0.750000
1.000000

5.
A gets very bored in the office hours.So when he doesnot have any work he plays with the strings.
A has a string S consisting of N lowercase English alphabets. He has prepared a list L consisting of all non empty substrings of the string S.

Now he asks you Q questions. To ith question, you need to count the number of ways to choose exactly Ei equal strings from the list L. As answer could be large you need to find it modulo 10^9+7.

Input

The first line of the input contains an integer T denoting the number of test cases. First line of each test case contains two space-separated integers N and Q denoting the length of the string S and amount of questions. The next line of each test case contains a single string S. Each of the next Q lines contains a single integer Ei.

Output

For each test case, output Q lines, each line should contain one integer - amount of ways to choose exactly Ei equal strings from the list L.

Constraints

Subtask 1: (10 points)

1 ≤ T ≤ 100
1 ≤ N ≤ 5
1 ≤ Q ≤ 5
1 ≤ Ei ≤ 5

Subtask 2: (20 points)

T = 1
1 ≤ N ≤ 500
1 ≤ Q ≤ 105
1 ≤ Ei ≤ 109

Subtask 3: (70 points)

T = 1
1 ≤ N ≤ 5000
1 ≤ Q ≤ 105
1 ≤ Ei ≤ 109
Example

Input:
1
5 4
ababa
2
1
3
4
Output:
7
15
1
0
Explanation

L = {"a", "b", "a", "b", "a", "ab", "ba", "ab", "ba", "aba", "bab", "aba", "abab", "baba", "ababa"}.

E1 = 2: There are seven ways to choose two equal strings ("a", "a"), ("a", "a"), ("a", "a"), ("b", "b"), ("ab", "ab"), ("ba", "ba"), ("aba", "aba").
E2 = 1: We can choose any string from L (15 ways).
E3 = 3: There is one way to choose three equal strings - ("a", "a", "a").
E4 = 4: There are no four equal strings in L .

6.
SVNIT has just announced their Annual Techno-Cultural Fest SPARSH 2K17. But the problem is you cannot take part in all the events as you lack the money. Unfortunately, this is not the first time to happen.
You make up your mind to solve the problem where it arises, namely at the events themselves. You introduce a limit for your event budget and try to have the most possible fun with regard to this limit.
You inquire beforehand about the entrance fee to each event and estimate how much fun you might have there. The list is readily compiled, but how do you actually pick the events that give you the most fun and do not exceed your budget?
Write a program which finds this optimal set of events that offer the most fun. Keep in mind that your budget need not necessarily be reached exactly. Achieve the highest possible fun level, and do not spend more money than is absolutely necessary.
Input
The first line of the input specifies your budget and the number n of events.
The following n lines contain two numbers each. The first number indicates the entrance fee of each event. Events cost between 5 and 25 Rupees. The second number indicates the amount of fun of each event, given as an integer number ranging from 0 to 10.
The budget will not exceed 500 and there will be at most 100 events. All numbers are separated by a single space.
There are many test cases. Input ends with 0 0.
Output
For each test case your program must output the sum of the entrance fees and the sum of all fun values of an optimal solution. Both numbers must be separated by a single space.
Sample Input
50 10
12 3
15 8
16 9
16 6
10 2
21 9
18 4
12 4
17 8
18 9 

50 10
13 8
19 10
16 8
12 9
10 2
12 8
13 5
15 5
11 7
16 2

0 0
Sample Output
49 26
48 32

7.
Since the dawn of mankind, humanity was at peace until the arrival of Kali Yuga. Greed and hatred has taken over humanity. To end this, a mystical sect of saints chose a man to rise up against all odds and defeat the evil prevailing within society. When the five natural elements of life, fire, earth, water, wind and sky invigorated his body, he gains superpowers and becomes a Shaktiman (Superhuman).

His signature attack is cloning himself. Every element can further be divided into more elements. Each element is a 'clone' to other.
Shaltiman arrives alone at the battlefield at t=1 second. At each time step , t= 1,2,3,….,n second , some of the Shaktimans will leave to start fighting the enemy and the rest will stay back and perform the cloning again. If a clone has left to fight the enemy he cannot come back to perform the attack. Also at t=n seconds all Shaktimans will go to fight with the enemy, i. e. no more cloning will take place on and after n seconds. Shaktiman is a very dedicated man so he won’t allow any of his clone to stay out of the fight. The saint observes Shaktiman's actions. He notes down the number of clones that went to fight the enemy at each time step( from t=1 second till t=n second). However he is old and doubts if his observations are correct. He hires you, a prodigy of the 90's with sharp analytical skills, to check if his observations can be valid or not.

INPUT:

The first line of the input contains t the number of test cases. The first line of each test case contains n, the time when all Shaktiman clones go to fight. In the second line of each test case there are n space separated integers that tell how many Shaktimans clones went to fight at successive seconds, starting from t = 1 second till t = n seconds;

OUTPUT:

For each test case output either “Yes” or “No” (without quotes) in a single line. “Yes” if the saint's observations were correct and “No” if they were wrong;

CONSTRAINTS:

1<= T <= 20

1<= n <=10^6

Each of the n integers will be less than or equal to 10 ^ 6





SAMPLE INPUT 
3
3
0 0 4
2
0 5
3
0 1 2
SAMPLE OUTPUT 
Yes
No
Yes

At t = 1 second, Shaktiman population is 1. According to the commander’s observations no Shaktiman leaves to fight at t=1 ( and all will perform the cloning), so the population will become 1 X 2= 2. He observed that at t=2 seconds, 5 Skaktimans went to fight. This is not possible as at t=2 seconds the Shaktiman population is only 2. Therefore, the commander’s observations are incorrect.

8.
Zombie Land.

Two Zombie hunters,Wastson and Patrick are on a mission to clear the rave party land.

Their goal is to kill all the zombies out there. A certain number of points is given for killing each zomnie depending on the type of zombie and their strength factor.

There are n types of Zombies. The number of zombies of type ai and zombie cost ci is known for each type. A hunter gets ci.f points for destroying one zombie of type i, where f is the strength factor. The stregth factor can be an integer number from 1 to t + 1, inclusive. At the beginning of the game the factor value is equal to 1. The factor is set to i + 1 after destruction of pi (1 <= i <= t) zombies, so the (pi + 1)-th zombie to be killed is considered with factor equal to i+1.

Your task is to determine the maximum number of points Watson and Patrick can get after they kill all the zombies. Take into account that they are so tough that they can kill zombies in any order chosen by them individually.

Input :

The first line contains the only integer number n (1 <= n <= 100) — the number of zombie types.

Each of the following n lines contains two integer numbers ai and ci (1 <= ai <= 10^9, 0 <= ci <= 1000), separated with space — the number of zombies of the i-th type and the zombie cost of one i-type zombie, correspondingly.

The next line contains the only integer number t (1 <= t <= 100) — the number that describe the factor's changes.

The next line contains t integer numbers pi (1 <= p1 < p2 < ... < pt <= 10^12), separated with spaces.

Output:
Print the only number — the maximum number of points they can get.


